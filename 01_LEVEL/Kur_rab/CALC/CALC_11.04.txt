#include <stdio.h>
#include <stdlib.h>
#include <GL\freeglut.h>

#include <string.h>
#include <ctype.h>
#include <math.h>

//Определения типов для устранения неоднозначностей
//typedef GLfloat point;
typedef int flag;

//Структура, определяемая типом, для обозначения состояния структуры calculator
typedef struct {
    flag currentOperand;        //1.Указывает, какой операнд вводится. -0, если первый и 1, если второй-
    flag resultObtained;        //2.Указывает, получен ли результат, чтобы его можно было отобразить
    flag operationDone;         //3.Указывает, выполнена ли операция так, чтобы отображение больше не обновлялось после этого -0, если не выполнено, 1, если выполнено -
    flag operandLength;         //4.Полезно для ограничения калькулятор для 10-значных операндов
    flag clearScreen;           //5.Полезно для очистки экрана
    flag decimalOperation;      //6.Помечает операцию как десятичную. так что десятичную точку можно использовать только один раз.
    flag ErrorOccured;          //7.При попытке деления на ноль этот флаг устанавливается равным 1
    flag turnedON;				//8.Если калькулятор включен, его значение равно 1. По умолчанию его значение равно 0
} status;


//Для индексации 1-го и 2-го операндов, а также общего выражения.
int opr1Index = 0, opr2Index = 0, expIndex = 0;
//Назначенный инициализатор для настройки начального статуса статистики состояния калькулятора
status stat = { 0, 0, 0, 0, 0, 0, 0, 0 };
//Строки для хранения введенных операндов и oprtrs
char operand1Str[50], operand2Str[50], resStr[50], totalExp[100], oprtr, ** endptr = NULL;
//Операнды в строках, преобразованные в числа с плавающей запятой, и результат операции
double tempOperand, operand1, operand2, result = 0;
//Некоторые временные переменные, полезные при печати на выходе калькулятора
char tempStr[100];
int temp = -2, x = 0;

//задает начальные и конечные координаты Y для всех кнопок.
//Значение изменяется каждый раз перед рисованием отдельной строки.
//point rowMinY, rowMaxY;

//Font/Text related stuff
/*typedef enum {
    MODE_BITMAP,
    MODE_STROKE
} mode_type;
static mode_type mode;
static int font_index;*/

//Принимает 4 точки в качестве аргументов и рисует многоугольник, используя его.
//void DrawButton(point p1, point p2, point p3, point p4);
//Вызывает DrawButtons несколько раз, чтобы нарисовать все кнопки калькулятора
//void DrawAllButtons(void);
//Для печати заданной строки или символа в местоположении (x, y)
//void output(int x, int y, char const* string);
//Инициализировать дисплей и окно.
//void initCal(void);
//Отображение обратного вызова.
//void Display(void);                                     // пока не дошел
//Обрабатывает событие мыши.
//void Mouse(int btn, int state, int x, int y);
//Обрабатывает событие клавиатуры.
void Keys(unsigned char key, int x, int y);
//Масштабирует окно при изменении размера.
//void MyReshape(int w, int h);
//Печать на экране вывода калькулятора
void PrintOutput(void);
//Перенастройка операндов для дальнейших операций
void ReconfigureOperands(void);
//Вычислить результат предыдущей операции
void CalculateResult(void);
//Очистить экран вывода дисплея калькулятора
void ClearEverything(void);
//Считайте символ и назначьте ему желаемый операнд
void ReadCharacter(const char key);
//Считывание оператора для выполнения операции
void ReadOperator(const char key);

void mainCal()
{
/*    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(310, 512);
    glutCreateWindow("Calculator v1.0");*/
    //initCal();
//    glutMouseFunc(Mouse);
//    glutKeyboardFunc(Keys);
//    glutDisplayFunc(Display);                                     // пока не дошел
    //glutReshapeFunc(MyReshape);
//    glutMainLoop();
    //return 0;
}
/*
void DrawButton(point p1, point p2, point p3, point p4)
{
    glBegin(GL_POLYGON);
    glVertex2f(p1, rowMinY);
    glVertex2f(p2, rowMinY);
    glVertex2f(p3, rowMaxY);
    glVertex2f(p4, rowMaxY);
    glEnd();
}

void DrawAllButtons(void) {
    glColor3f(0.11f, 0.11f, 0.11f);
    rowMinY = 15.0, rowMaxY = 70.0;				    //1-й ряд кнопок
    DrawButton(15.0, 70.0, 70.0, 15.0);
    glColor3f(0.79f, 0.79f, 0.79f);
    DrawButton(90.0, 145.0, 145.0, 90.0);
    DrawButton(165.0, 220.0, 220.0, 165.0);
    DrawButton(240.0, 295.0, 295.0, 240.0);
    rowMinY = 90.0, rowMaxY = 145.0;				//2-й ряд кнопок
    DrawButton(15.0, 70.0, 70.0, 15.0);
    DrawButton(90.0, 145.0, 145.0, 90.0);
    DrawButton(165.0, 220.0, 220.0, 165.0);
    DrawButton(240.0, 295.0, 295.0, 240.0);
    rowMinY = 165.0, rowMaxY = 220.0;				//3-й ряд кнопок
    DrawButton(15.0, 70.0, 70.0, 15.0);
    DrawButton(90.0, 145.0, 145.0, 90.0);
    DrawButton(165.0, 220.0, 220.0, 165.0);
    DrawButton(240.0, 295.0, 295.0, 240.0);
    rowMinY = 240.0, rowMaxY = 295.0;				//4-й ряд кнопок
    DrawButton(15.0, 70.0, 70.0, 15.0);
    DrawButton(90.0, 145.0, 145.0, 90.0);
    DrawButton(165.0, 220.0, 220.0, 165.0);
    DrawButton(240.0, 295.0, 295.0, 240.0);
    rowMinY = 315.0, rowMaxY = 370.0;				//5-й ряд кнопок
    glColor3f(0.94f, 0.4f, 0.33f);
    DrawButton(15.0, 70.0, 70.0, 15.0);
    DrawButton(90.0, 145.0, 145.0, 90.0);
    DrawButton(165.0, 295.0, 295.0, 165.0);
    rowMinY = 390, rowMaxY = 485;                   //Экран вывода
    glColor3f(0.93f, 0.98f, 0.75f);
    DrawButton(15.0, 295.0, 295.0, 15.0);


    glColor3f(1.0, 1.0, 1.0);                       //Отображение каждого из названий кнопок.
    output(25, 25, "0");
    output(100, 25, ".");
    output(175, 25, "=");
    output(250, 25, "+");

    output(25, 100, "1");
    output(100, 100, "2");
    output(175, 100, "3");
    output(250, 100, "-");

    output(25, 175, "4");
    output(100, 175, "5");
    output(175, 175, "6");
    output(250, 175, "*");

    output(25, 250, "7");
    output(100, 250, "8");
    output(175, 250, "9");
    output(250, 250, "/");

    output(25, 325, "ON");
    output(95, 325, "OFF");
    output(215, 325, "AC");
}*/

/*void output(int x, int y, char const* string)
{
    int len, i;
    glRasterPos2f(x, y);
    len = (int)strlen(string);
    for (i = 0; i < len; i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, string[i]);
    }
}*/

/*void MyReshape(int w, int h)
{
    glutReshapeWindow(310, 500);
}*/

/*void initCal(void) {
    glClearColor(0.60f, 0.60f, 0.60f, 1.0f);                // серый фон
    glMatrixMode(GL_PROJECTION);                            // настройка проекции просмотра
    glLoadIdentity();                                      	// начать с идентификационной матрицы
    glOrtho(0.0f, 310.0f, 0.0f, 500.0f, 0.0f, 1.0f);       	// настройка режима окна просмотра
    mode = MODE_BITMAP;
    font_index = 0;
}*/

/*void Display(void) {
    glClear(GL_COLOR_BUFFER_BIT);
    DrawAllButtons();                             //пока недошел
    if (stat.turnedON) {
        PrintOutput();
    }
    glFlush();
    glutSwapBuffers();
}*/

void Mouse(int btn, int state, int x, int y) 
{
    if (stat.turnedON) {
        if (btn == GLUT_LEFT_BUTTON && (x > 15 && x < 70) && (y > 455 && y < 505) && state == GLUT_DOWN) {
            ReadCharacter('0');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 90 && x < 145) && (y > 455 && y < 505) && state == GLUT_DOWN) {
            if (stat.decimalOperation == 0) {
                if (stat.currentOperand == 0) {
                    stat.operandLength++;
                    if (stat.operandLength > 10) {
                        return;
                    }
                    operand1Str[opr1Index++] = '.';
                    stat.decimalOperation = 1;
                }
                else if (stat.currentOperand == 1) {
                    stat.operandLength++;
                    if (stat.operandLength > 10) {
                        return;
                    }
                    operand2Str[opr2Index++] = '.';
                    stat.decimalOperation = 1;
                }
                totalExp[expIndex++] = '.';
            }
            else if (stat.decimalOperation == 1)
                return;
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 15 && x < 70) && (y > 380 && y < 430) && state == GLUT_DOWN) {
            ReadCharacter('1');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 90 && x < 145) && (y > 380 && y < 430) && state == GLUT_DOWN) {
            ReadCharacter('2');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 165 && x < 220) && (y > 380 && y < 430) && state == GLUT_DOWN) {
            ReadCharacter('3');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 15 && x < 70) && (y > 305 && y < 355) && state == GLUT_DOWN) {
            ReadCharacter('4');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 90 && x < 145) && (y > 305 && y < 355) && state == GLUT_DOWN) {
            ReadCharacter('5');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 165 && x < 220) && (y > 305 && y < 355) && state == GLUT_DOWN) {
            ReadCharacter('6');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 15 && x < 70) && (y > 230 && y < 280) && state == GLUT_DOWN) {
            ReadCharacter('7');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 90 && x < 145) && (y > 230 && y < 280) && state == GLUT_DOWN) {
            ReadCharacter('8');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 165 && x < 220) && (y > 230 && y < 280) && state == GLUT_DOWN) {
            ReadCharacter('9');
            glutPostRedisplay();
        }

        else if (btn == GLUT_LEFT_BUTTON && (x > 240 && x < 295) && (y > 455 && y < 505) && state == GLUT_DOWN) {
            ReadOperator('+');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 240 && x < 295) && (y > 380 && y < 430) && state == GLUT_DOWN) {
            ReadOperator('-');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 240 && x < 295) && (y > 305 && y < 355) && state == GLUT_DOWN) {
            ReadOperator('*');
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 240 && x < 295) && (y > 230 && y < 280) && state == GLUT_DOWN) {
            ReadOperator('/');
            glutPostRedisplay();
        }

        else if (btn == GLUT_LEFT_BUTTON && (x > 165 && x < 295) && (y > 155 && y < 205) && state == GLUT_DOWN) {
            //AC нажат
            ClearEverything();
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 165 && x < 220) && (y > 455 && y < 505) && state == GLUT_DOWN) {
            // = нажимаетс
            CalculateResult();
            glutPostRedisplay();
        }
        else if (btn == GLUT_LEFT_BUTTON && (x > 90 && x < 145) && (y > 155 && y < 205) && state == GLUT_DOWN) {
            exit(0);
        }
    }
    else if (btn == GLUT_LEFT_BUTTON && (x > 15 && x < 70) && (y > 155 && y < 205) && state == GLUT_DOWN) {
        stat.turnedON = 1;
        glutPostRedisplay();
    }

}

void Keys(unsigned char key, int x, int y) {
    if (stat.turnedON) {
        switch (key) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            ReadCharacter(key);
            break;

        case '.':
            if (stat.decimalOperation == 0) {
                if (stat.currentOperand == 0) {
                    stat.operandLength++;
                    if (stat.operandLength > 10) {
                        return;
                    }
                    operand1Str[opr1Index++] = '.';
                    stat.decimalOperation = 1;
                }
                else if (stat.currentOperand == 1) {
                    stat.operandLength++;
                    if (stat.operandLength > 10) {
                        return;
                    }
                    operand2Str[opr2Index++] = '.';
                    stat.decimalOperation = 1;
                }
                totalExp[expIndex++] = '.';
            }
            else if (stat.decimalOperation == 1)
                return;
            break;

        case '+':
            ReadOperator('+');
            break;
        case '-':
            ReadOperator('-');
            break;
        case '*':
            ReadOperator('*');
            break;
        case '/':
            ReadOperator('/');
            break;

        case '=':
        case 13:							//ASCII-значение возвращаемого ключа
            CalculateResult();
            break;

        case 27:							//ASCII-значение Escape-ключа
            ClearEverything();
            break;

        default:
            printf("Invalid Character Chosen\n");
            return;
            break;
        }
        glutPostRedisplay();
    }
    else
        return;
}

/*void PrintOutput(void) {                    ////пока недошел
    glColor3f(0.0f, 0.0f, 0.0f);
    if (stat.operationDone != 1) {
        glColor3f(0.0, 0.0, 0.0);
        temp++;
        tempStr[temp] = totalExp[temp];
        output(20, 460, tempStr);
    }
    if (stat.resultObtained) {
        if (expIndex > 25)
            totalExp[23] = '\0';
        output(20, 460, totalExp);
        if (stat.ErrorOccured) {
            output(20, 400, "Error.");
            stat.ErrorOccured = 0;
        }
        else {
            output(20, 400, "=   ");
            output(35, 400, resStr);
        }
    }*/
/*    if (stat.clearScreen) {
        rowMinY = 390, rowMaxY = 485;                    ////пока недошел
        glColor3f(0.93f, 0.98f, 0.75f);
        DrawButton(15.0, 295.0, 295.0, 15.0);
        stat.clearScreen = 0;
    }
    if (stat.turnedON) {
        glColor3f(0.0, 0.0, 0.0);
        glBegin(GL_LINE_LOOP);
        glVertex2f(15, 390);
        glVertex2f(295, 390);
        glVertex2f(295, 485);
        glVertex2f(15, 485);
        glEnd();
    }
}*/

void ReconfigureOperands(void)
{
    sprintf(operand1Str, "%f", result);
    memset(totalExp, '\0', sizeof(totalExp));             //сбросить totalExp с помощью нулевой строки
    memset(operand2Str, '\0', sizeof(operand2Str));
    strcpy(totalExp, operand1Str);
    expIndex = 0, opr1Index = 0, opr2Index = 0;
    while (operand1Str[expIndex] != '\0')
        expIndex += 1;
    opr2Index = 0;
    stat.currentOperand = 1;
    stat.resultObtained = 1;
    stat.operationDone = 1;
    stat.decimalOperation = 0;
    stat.operandLength = 0;
}

void CalculateResult(void) {
    totalExp[expIndex] = '\0';
    printf("oprand1 = %s\n", operand1Str);
    printf("oprand2 = %s\n", operand2Str);
    operand1 = strtod(operand1Str, endptr);
    operand2 = strtod(operand2Str, endptr);
    switch (oprtr) {
    case '+':
        result = operand1 + operand2;
        sprintf(resStr, "%f", result);				//преобразовать double в строку
        ReconfigureOperands();
        printf("%s is the result.\n", resStr);
        break;
    case '*':
        result = operand1 * operand2;
        sprintf(resStr, "%f", result);
        if (expIndex > 20) {
            resStr[22] = '\0';
        }
        ReconfigureOperands();
        printf("%f is the result.\n", result);
        break;
    case '-':
        result = operand1 - operand2;
        //sprintf(resStr, "%f", result);
        ReconfigureOperands();
        printf("%f is the result.\n", result);
        break;
    case '/':
        if (operand2 == 0) {
            stat.ErrorOccured = 1;
            stat.resultObtained = 1;
            glutPostRedisplay();
            return;
        }
        result = operand1 / operand2;
        //sprintf(resStr, "%f", result);
        ReconfigureOperands();
        printf("%f is the result.\n", result);
        break;
    default:
        printf("Invalid Character Chosen\n");
        break;
    }
}

void ClearEverything(void) {
    printf("AC is selected.\n");
    memset(operand1Str, '\0', sizeof(operand1Str));             //сбросить операнд 1 с нулевой строкой
    memset(operand2Str, '\0', sizeof(operand2Str));             //сбросить операнд 2 с помощью null string
    memset(totalExp, '\0', sizeof(totalExp));                   //сбросить итоговое выражение с помощью null string
    memset(tempStr, '\0', sizeof(tempStr));
    opr1Index = 0; opr2Index = 0, expIndex = 0, temp = -2;      //сбросить индекс обеих строк операндов и общее значение выражения
    stat.currentOperand = 0;									//1.Указывает, какой операнд вводится. -0, если первый и 1, если второй-
    stat.resultObtained = 0;									//2.Указывает, получен ли результат, чтобы его можно было отобразить
    stat.operationDone = 0;										//3.Указывает, выполняется ли операция, чтобы после этого отображение больше не обновлялось -0, если не выполнено, 1, если выполнено -
    stat.operandLength = 0;										//4.Полезно при ограничении калькулятора 10-значными операндами
    stat.clearScreen = 1;										//5.Полезно для очистки
    stat.decimalOperation = 0;
    printf("Both Operands cleared.\n");
}

void ReadCharacter(const char key) {
    if (stat.currentOperand == 0) {
        stat.operandLength++;
        if (stat.operandLength > 10) {
            return;
        }
        operand1Str[opr1Index++] = key;
    }
    else if (stat.currentOperand == 1) {
        stat.operandLength++;
        if (stat.operandLength > 10) {
            return;
        }
        operand2Str[opr2Index++] = key;
    }
    totalExp[expIndex++] = key;
}

void ReadOperator(const char key) {
    if (stat.currentOperand == 0 && stat.operandLength == 0) {
        ClearEverything();
        return;
    }
    if (stat.currentOperand == 1 && stat.operandLength > 0) {
        return;
    }
    oprtr = key;
    totalExp[expIndex++] = key;
    stat.currentOperand = 1;
    stat.operandLength = 0;
    stat.decimalOperation = 0;
}
